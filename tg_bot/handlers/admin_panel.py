import json
import logging
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import (Message, CallbackQuery)

from tg_bot.business_logic import file_parser
"""from business_logic.api_client import APIClient""" # –°–¥–µ–ª–∞–π –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–ø–∏—à–∫–µ —Å–≤–æ–µ–π, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ, –ø–∞—Ä—Å–µ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–∞–≤–µ—Ä–Ω–æ–µ —Ç–æ–∂–µ –Ω–∞ —à–∞—Ä–ø–∞—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å(—è –Ω–µ –µ–±—É)

from tg_bot.config_data import config

logger = logging.getLogger(__name__)
router = Router()

ADMINS = [867597472, 1053602730]  # —Å—é–¥–∞ –≤–ø–∏—Å—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–æ–≤(–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)

class AdminStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_confirmation = State()

# –¢–∏–ø—ã –º–æ–¥–µ–ª–µ–π —Å –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
MODEL_TYPES = {
    'nomenclature': '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
    'prices': '–¶–µ–Ω—ã', 
    'remnants': '–û—Å—Ç–∞—Ç–∫–∏',
    'stocks': '–°–∫–ª–∞–¥—ã',
    'types': '–¢–∏–ø—ã'
}

def admin_only(handler):
    async def wrapper(message: types.Message, state: FSMContext):
        if message.from_user.id not in ADMINS:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return
        await handler(message, state)
    return wrapper

@router.message(Command('updatedata'))
@admin_only
async def cmd_updatedata(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /updatedata
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    """
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –º–æ–¥–µ–ª–µ–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=display_name,
                callback_data=f"model_type:{model_key}"
            )]
            for model_key, display_name in MODEL_TYPES.items()
        ]
    )
    
    await message.answer(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith('model_type:'))
async def process_model_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ callback
    –ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏ –∏–∑ callback_data
    model_type = callback.data.split(':', 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    if model_type not in MODEL_TYPES:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_model_type=model_type)
    await state.set_state(AdminStates.waiting_for_file)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    model_display_name = MODEL_TYPES[model_type]
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        f"üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{model_display_name}</b> –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON\n\n"
        f"üìã <i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:</i>\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç: .json\n"
        f"‚Ä¢ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8",
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.message(AdminStates.waiting_for_file, F.document)
async def process_uploaded_file(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    """
    document = message.document
    user_data = await state.get_data()
    model_type = user_data.get('selected_model_type')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if not model_type:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –º–æ–¥–µ–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /updatedata")
        await state.clear()
        return
    
    try:      
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if not document.file_name or not document.file_name.lower().endswith('.json'):
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json",
                parse_mode="HTML"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...")
        
        file_info = await message.bot.get_file(document.file_id)
        file_content = await message.bot.download_file(file_info.file_path)
        
        # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        file_parser = FileParser()
        parsed_data = await file_parser.parse_and_validate(
            file_content=file_content,
            model_type=model_type,
            filename=document.file_name
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            parsed_data=parsed_data,
            filename=document.file_name,
            file_size=document.file_size  # –≠—Ç–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∏–Ω—Ñ—ã —é–∑–µ—Ä—É
        )
        await state.set_state(AdminStates.waiting_for_confirmation)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        model_display_name = MODEL_TYPES[model_type]
        records_count = len(parsed_data) if isinstance(parsed_data, list) else "N/A"
        
        confirmation_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="confirm_upload:yes"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_upload:no")
                ]
            ]
        )
        
        await message.answer(
            f"üìä <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"<b>–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:</b> {model_display_name}\n"
            f"<b>–ò–º—è —Ñ–∞–π–ª–∞:</b> {document.file_name}\n"
            f"<b>–†–∞–∑–º–µ—Ä:</b> {document.file_size / 1024:.1f} KB\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</b> {records_count}\n\n"
            f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É:",
            reply_markup=confirmation_keyboard,
            parse_mode="HTML"
        )
        
    except json.JSONDecodeError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON</b>\n\n"
            f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
            parse_mode="HTML"
        )
    except ValueError as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Unexpected error processing file: {e}")
        await message.answer(
            f"‚ùå <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )

@router.callback_query(F.data.startswith('confirm_upload:'), AdminStates.waiting_for_confirmation)
async def process_upload_confirmation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    confirmation = callback.data.split(':', 1)[1]
    user_data = await state.get_data()
    
    if confirmation == "yes":
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            processing_msg = await callback.message.edit_text(
                "‚è≥ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode="HTML"
            )
            
            api_client = APIClient()
            result = await api_client.send_data(
                model_type=user_data['selected_model_type'],
                data=user_data['parsed_data']
            )
            
            # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            model_display_name = MODEL_TYPES[user_data['selected_model_type']]
            await processing_msg.edit_text(
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"<b>–¢–∏–ø:</b> {model_display_name}\n"
                f"<b>–§–∞–π–ª:</b> {user_data['filename']}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {result.get('status', 'OK')}\n"
                f"<b>–ó–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {result.get('processed_count', 'N/A')}",
                parse_mode="HTML"
            )
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"API error: {e}")
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É:\n"
                f"<code>{str(e)}</code>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            await state.clear()
    
    elif confirmation == "no":
        await callback.message.edit_text(
            "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /updatedata",
            parse_mode="HTML"
        )
        await state.clear()
    
    await callback.answer()

@router.message(AdminStates.waiting_for_file)
async def handle_invalid_file_input(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    """
    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        parse_mode="HTML"
    )

@router.message(AdminStates.waiting_for_confirmation)
async def handle_invalid_confirmation_input(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    await message.answer(
        "‚ùì <b>–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.",
        parse_mode="HTML"
    )