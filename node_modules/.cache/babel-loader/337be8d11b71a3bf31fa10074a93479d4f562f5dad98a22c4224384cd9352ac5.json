{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kllrq\\\\Desktop\\\\WEB\\\\shop\\\\src\\\\components\\\\AdvancedFilter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdvancedFilter({\n  items,\n  onFilterChange,\n  isOpen\n}) {\n  _s();\n  const [filters, setFilters] = useState({\n    warehouses: [],\n    productTypes: [],\n    diameters: [],\n    walls: [],\n    gosts: [],\n    steelGrades: [],\n    priceRange: {\n      min: 0,\n      max: 1000\n    }\n  });\n\n  // Получаем уникальные значения для фильтров\n  const filterOptions = useMemo(() => {\n    const warehouses = [...new Set(items.map(item => item.warehouse))];\n    const productTypes = [...new Set(items.map(item => item.productType))];\n    const diameters = [...new Set(items.map(item => item.diameter))];\n    const walls = [...new Set(items.map(item => item.wall))];\n    const gosts = [...new Set(items.map(item => item.gost))];\n    const steelGrades = [...new Set(items.map(item => item.steelGrade))];\n    const prices = items.map(item => parseInt(item.price));\n    const minPrice = Math.min(...prices);\n    const maxPrice = Math.max(...prices);\n    return {\n      warehouses,\n      productTypes,\n      diameters,\n      walls,\n      gosts,\n      steelGrades,\n      minPrice,\n      maxPrice\n    };\n  }, [items]);\n  const handleFilterChange = (filterType, value) => {\n    const newValues = filters[filterType].includes(value) ? filters[filterType].filter(item => item !== value) : [...filters[filterType], value];\n    const newFilters = {\n      ...filters,\n      [filterType]: newValues\n    };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n  const handlePriceChange = (min, max) => {\n    const newFilters = {\n      ...filters,\n      priceRange: {\n        min: parseInt(min),\n        max: parseInt(max)\n      }\n    };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n  const resetFilters = () => {\n    const newFilters = {\n      warehouses: [],\n      productTypes: [],\n      diameters: [],\n      walls: [],\n      gosts: [],\n      steelGrades: [],\n      priceRange: {\n        min: 0,\n        max: 1000\n      }\n    };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"advanced-filter\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u0421\\u043A\\u043B\\u0430\\u0434:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-options\",\n            children: filterOptions.warehouses.map(warehouse => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"filter-option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: filters.warehouses.includes(warehouse),\n                onChange: () => handleFilterChange('warehouses', warehouse)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this), warehouse]\n            }, warehouse, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u0412\\u0438\\u0434 \\u043F\\u0440\\u043E\\u0434\\u0443\\u043A\\u0446\\u0438\\u0438:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-options\",\n            children: filterOptions.productTypes.map(type => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"filter-option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: filters.productTypes.includes(type),\n                onChange: () => handleFilterChange('productTypes', type)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this), type]\n            }, type, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u0414\\u0438\\u0430\\u043C\\u0435\\u0442\\u0440:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-options\",\n            children: filterOptions.diameters.map(diameter => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"filter-option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: filters.diameters.includes(diameter),\n                onChange: () => handleFilterChange('diameters', diameter)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this), diameter]\n            }, diameter, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u0421\\u0442\\u0435\\u043D\\u043A\\u0430:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-options\",\n            children: filterOptions.walls.map(wall => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"filter-option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: filters.walls.includes(wall),\n                onChange: () => handleFilterChange('walls', wall)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this), wall]\n            }, wall, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u0413\\u041E\\u0421\\u0422:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-options\",\n            children: filterOptions.gosts.map(gost => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"filter-option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: filters.gosts.includes(gost),\n                onChange: () => handleFilterChange('gosts', gost)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this), gost]\n            }, gost, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"\\u041C\\u0430\\u0440\\u043A\\u0430 \\u0441\\u0442\\u0430\\u043B\\u0438:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-options\",\n            children: filterOptions.steelGrades.map(grade => /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"filter-option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: filters.steelGrades.includes(grade),\n                onChange: () => handleFilterChange('steelGrades', grade)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 19\n              }, this), grade]\n            }, grade, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-group price-filter\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"\\u0426\\u0435\\u043D\\u0430: \", filters.priceRange.min, \" - \", filters.priceRange.max, \" \\u0440\\u0443\\u0431.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"price-range\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: filterOptions.minPrice,\n            max: filterOptions.maxPrice,\n            value: filters.priceRange.min,\n            onChange: e => handlePriceChange(e.target.value, filters.priceRange.max),\n            className: \"price-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: filterOptions.minPrice,\n            max: filterOptions.maxPrice,\n            value: filters.priceRange.max,\n            onChange: e => handlePriceChange(filters.priceRange.min, e.target.value),\n            className: \"price-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetFilters,\n        className: \"reset-filters-btn\",\n        children: \"\\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C \\u0444\\u0438\\u043B\\u044C\\u0442\\u0440\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(AdvancedFilter, \"VZW5Abiwn/NolIzRGCWKVm15zJU=\");\n_c = AdvancedFilter;\nexport default AdvancedFilter;\n\n// import React, { useState, useMemo } from 'react';\n\n// function AdvancedFilter({ items, onFilterChange }) {\n//   const [filters, setFilters] = useState({\n//     materials: [],\n//     diameters: [],\n//     lengths: [],\n//     priceRange: { min: 0, max: 1000 }\n//   });\n\n//   const [isExpanded, setIsExpanded] = useState(false);\n\n//   // Получаем уникальные значения для фильтров\n//   const filterOptions = useMemo(() => {\n//     const materials = [...new Set(items.map(item => item.material))];\n//     const diameters = [...new Set(items.map(item => item.diameter))];\n//     const lengths = [...new Set(items.map(item => item.length))];\n//     const prices = items.map(item => parseInt(item.price));\n//     const minPrice = Math.min(...prices);\n//     const maxPrice = Math.max(...prices);\n\n//     return { materials, diameters, lengths, minPrice, maxPrice };\n//   }, [items]);\n\n//   const handleMaterialChange = (material) => {\n//     const newMaterials = filters.materials.includes(material)\n//       ? filters.materials.filter(m => m !== material)\n//       : [...filters.materials, material];\n\n//     const newFilters = { ...filters, materials: newMaterials };\n//     setFilters(newFilters);\n//     onFilterChange(newFilters);\n//   };\n\n//   const handleDiameterChange = (diameter) => {\n//     const newDiameters = filters.diameters.includes(diameter)\n//       ? filters.diameters.filter(d => d !== diameter)\n//       : [...filters.diameters, diameter];\n\n//     const newFilters = { ...filters, diameters: newDiameters };\n//     setFilters(newFilters);\n//     onFilterChange(newFilters);\n//   };\n\n//   const handleLengthChange = (length) => {\n//     const newLengths = filters.lengths.includes(length)\n//       ? filters.lengths.filter(l => l !== length)\n//       : [...filters.lengths, length];\n\n//     const newFilters = { ...filters, lengths: newLengths };\n//     setFilters(newFilters);\n//     onFilterChange(newFilters);\n//   };\n\n//   const handlePriceChange = (min, max) => {\n//     const newFilters = { \n//       ...filters, \n//       priceRange: { min: parseInt(min), max: parseInt(max) } \n//     };\n//     setFilters(newFilters);\n//     onFilterChange(newFilters);\n//   };\n\n//   const resetFilters = () => {\n//     const newFilters = {\n//       materials: [],\n//       diameters: [],\n//       lengths: [],\n//       priceRange: { min: 0, max: 1000 }\n//     };\n//     setFilters(newFilters);\n//     onFilterChange(newFilters);\n//   };\n\n//   return (\n//     <div className=\"advanced-filter\">\n//       <div \n//         className=\"filter-header\"\n//         onClick={() => setIsExpanded(!isExpanded)}\n//       >\n//         <h3>Расширенный фильтр</h3>\n//         <span className={`expand-icon ${isExpanded ? 'expanded' : ''}`}>\n//           ▼\n//         </span>\n//       </div>\n\n//       {isExpanded && (\n//         <div className=\"filter-content\">\n//           {/* Фильтр по материалу */}\n//           <div className=\"filter-group\">\n//             <label>Материал:</label>\n//             <div className=\"filter-options\">\n//               {filterOptions.materials.map(material => (\n//                 <label key={material} className=\"filter-option\">\n//                   <input\n//                     type=\"checkbox\"\n//                     checked={filters.materials.includes(material)}\n//                     onChange={() => handleMaterialChange(material)}\n//                   />\n//                   {material}\n//                 </label>\n//               ))}\n//             </div>\n//           </div>\n\n//           {/* Фильтр по диаметру */}\n//           <div className=\"filter-group\">\n//             <label>Диаметр:</label>\n//             <div className=\"filter-options\">\n//               {filterOptions.diameters.map(diameter => (\n//                 <label key={diameter} className=\"filter-option\">\n//                   <input\n//                     type=\"checkbox\"\n//                     checked={filters.diameters.includes(diameter)}\n//                     onChange={() => handleDiameterChange(diameter)}\n//                   />\n//                   {diameter}\n//                 </label>\n//               ))}\n//             </div>\n//           </div>\n\n//           {/* Фильтр по длине */}\n//           <div className=\"filter-group\">\n//             <label>Длина:</label>\n//             <div className=\"filter-options\">\n//               {filterOptions.lengths.map(length => (\n//                 <label key={length} className=\"filter-option\">\n//                   <input\n//                     type=\"checkbox\"\n//                     checked={filters.lengths.includes(length)}\n//                     onChange={() => handleLengthChange(length)}\n//                   />\n//                   {length}\n//                 </label>\n//               ))}\n//             </div>\n//           </div>\n\n//           {/* Фильтр по цене */}\n//           <div className=\"filter-group\">\n//             <label>Цена: {filters.priceRange.min} - {filters.priceRange.max} руб.</label>\n//             <div className=\"price-range\">\n//               <input\n//                 type=\"range\"\n//                 min={filterOptions.minPrice}\n//                 max={filterOptions.maxPrice}\n//                 value={filters.priceRange.min}\n//                 onChange={(e) => handlePriceChange(e.target.value, filters.priceRange.max)}\n//                 className=\"price-slider\"\n//               />\n//               <input\n//                 type=\"range\"\n//                 min={filterOptions.minPrice}\n//                 max={filterOptions.maxPrice}\n//                 value={filters.priceRange.max}\n//                 onChange={(e) => handlePriceChange(filters.priceRange.min, e.target.value)}\n//                 className=\"price-slider\"\n//               />\n//             </div>\n//           </div>\n\n//           <button onClick={resetFilters} className=\"reset-filters-btn\">\n//             Сбросить фильтры\n//           </button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default AdvancedFilter;\nvar _c;\n$RefreshReg$(_c, \"AdvancedFilter\");","map":{"version":3,"names":["React","useState","useMemo","jsxDEV","_jsxDEV","AdvancedFilter","items","onFilterChange","isOpen","_s","filters","setFilters","warehouses","productTypes","diameters","walls","gosts","steelGrades","priceRange","min","max","filterOptions","Set","map","item","warehouse","productType","diameter","wall","gost","steelGrade","prices","parseInt","price","minPrice","Math","maxPrice","handleFilterChange","filterType","value","newValues","includes","filter","newFilters","handlePriceChange","resetFilters","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","grade","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kllrq/Desktop/WEB/shop/src/components/AdvancedFilter.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\n\r\nfunction AdvancedFilter({ items, onFilterChange, isOpen }) {\r\n  const [filters, setFilters] = useState({\r\n    warehouses: [],\r\n    productTypes: [],\r\n    diameters: [],\r\n    walls: [],\r\n    gosts: [],\r\n    steelGrades: [],\r\n    priceRange: { min: 0, max: 1000 }\r\n  });\r\n\r\n  // Получаем уникальные значения для фильтров\r\n  const filterOptions = useMemo(() => {\r\n    const warehouses = [...new Set(items.map(item => item.warehouse))];\r\n    const productTypes = [...new Set(items.map(item => item.productType))];\r\n    const diameters = [...new Set(items.map(item => item.diameter))];\r\n    const walls = [...new Set(items.map(item => item.wall))];\r\n    const gosts = [...new Set(items.map(item => item.gost))];\r\n    const steelGrades = [...new Set(items.map(item => item.steelGrade))];\r\n    const prices = items.map(item => parseInt(item.price));\r\n    const minPrice = Math.min(...prices);\r\n    const maxPrice = Math.max(...prices);\r\n\r\n    return { \r\n      warehouses, \r\n      productTypes, \r\n      diameters, \r\n      walls, \r\n      gosts, \r\n      steelGrades, \r\n      minPrice, \r\n      maxPrice \r\n    };\r\n  }, [items]);\r\n\r\n  const handleFilterChange = (filterType, value) => {\r\n    const newValues = filters[filterType].includes(value)\r\n      ? filters[filterType].filter(item => item !== value)\r\n      : [...filters[filterType], value];\r\n    \r\n    const newFilters = { ...filters, [filterType]: newValues };\r\n    setFilters(newFilters);\r\n    onFilterChange(newFilters);\r\n  };\r\n\r\n  const handlePriceChange = (min, max) => {\r\n    const newFilters = { \r\n      ...filters, \r\n      priceRange: { min: parseInt(min), max: parseInt(max) } \r\n    };\r\n    setFilters(newFilters);\r\n    onFilterChange(newFilters);\r\n  };\r\n\r\n  const resetFilters = () => {\r\n    const newFilters = {\r\n      warehouses: [],\r\n      productTypes: [],\r\n      diameters: [],\r\n      walls: [],\r\n      gosts: [],\r\n      steelGrades: [],\r\n      priceRange: { min: 0, max: 1000 }\r\n    };\r\n    setFilters(newFilters);\r\n    onFilterChange(newFilters);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"advanced-filter\">\r\n      <div className=\"filter-content\">\r\n        <div className=\"filter-grid\">\r\n          \r\n          {/* Фильтр по складу */}\r\n          <div className=\"filter-group\">\r\n            <label>Склад:</label>\r\n            <div className=\"filter-options\">\r\n              {filterOptions.warehouses.map(warehouse => (\r\n                <label key={warehouse} className=\"filter-option\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={filters.warehouses.includes(warehouse)}\r\n                    onChange={() => handleFilterChange('warehouses', warehouse)}\r\n                  />\r\n                  {warehouse}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Фильтр по виду продукции */}\r\n          <div className=\"filter-group\">\r\n            <label>Вид продукции:</label>\r\n            <div className=\"filter-options\">\r\n              {filterOptions.productTypes.map(type => (\r\n                <label key={type} className=\"filter-option\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={filters.productTypes.includes(type)}\r\n                    onChange={() => handleFilterChange('productTypes', type)}\r\n                  />\r\n                  {type}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Фильтр по диаметру */}\r\n          <div className=\"filter-group\">\r\n            <label>Диаметр:</label>\r\n            <div className=\"filter-options\">\r\n              {filterOptions.diameters.map(diameter => (\r\n                <label key={diameter} className=\"filter-option\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={filters.diameters.includes(diameter)}\r\n                    onChange={() => handleFilterChange('diameters', diameter)}\r\n                  />\r\n                  {diameter}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Фильтр по стенке */}\r\n          <div className=\"filter-group\">\r\n            <label>Стенка:</label>\r\n            <div className=\"filter-options\">\r\n              {filterOptions.walls.map(wall => (\r\n                <label key={wall} className=\"filter-option\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={filters.walls.includes(wall)}\r\n                    onChange={() => handleFilterChange('walls', wall)}\r\n                  />\r\n                  {wall}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Фильтр по ГОСТ */}\r\n          <div className=\"filter-group\">\r\n            <label>ГОСТ:</label>\r\n            <div className=\"filter-options\">\r\n              {filterOptions.gosts.map(gost => (\r\n                <label key={gost} className=\"filter-option\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={filters.gosts.includes(gost)}\r\n                    onChange={() => handleFilterChange('gosts', gost)}\r\n                  />\r\n                  {gost}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Фильтр по марке стали */}\r\n          <div className=\"filter-group\">\r\n            <label>Марка стали:</label>\r\n            <div className=\"filter-options\">\r\n              {filterOptions.steelGrades.map(grade => (\r\n                <label key={grade} className=\"filter-option\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={filters.steelGrades.includes(grade)}\r\n                    onChange={() => handleFilterChange('steelGrades', grade)}\r\n                  />\r\n                  {grade}\r\n                </label>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        {/* Фильтр по цене */}\r\n        <div className=\"filter-group price-filter\">\r\n          <label>Цена: {filters.priceRange.min} - {filters.priceRange.max} руб.</label>\r\n          <div className=\"price-range\">\r\n            <input\r\n              type=\"range\"\r\n              min={filterOptions.minPrice}\r\n              max={filterOptions.maxPrice}\r\n              value={filters.priceRange.min}\r\n              onChange={(e) => handlePriceChange(e.target.value, filters.priceRange.max)}\r\n              className=\"price-slider\"\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              min={filterOptions.minPrice}\r\n              max={filterOptions.maxPrice}\r\n              value={filters.priceRange.max}\r\n              onChange={(e) => handlePriceChange(filters.priceRange.min, e.target.value)}\r\n              className=\"price-slider\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button onClick={resetFilters} className=\"reset-filters-btn\">\r\n          Сбросить фильтры\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdvancedFilter;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useMemo } from 'react';\r\n\r\n// function AdvancedFilter({ items, onFilterChange }) {\r\n//   const [filters, setFilters] = useState({\r\n//     materials: [],\r\n//     diameters: [],\r\n//     lengths: [],\r\n//     priceRange: { min: 0, max: 1000 }\r\n//   });\r\n\r\n//   const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n//   // Получаем уникальные значения для фильтров\r\n//   const filterOptions = useMemo(() => {\r\n//     const materials = [...new Set(items.map(item => item.material))];\r\n//     const diameters = [...new Set(items.map(item => item.diameter))];\r\n//     const lengths = [...new Set(items.map(item => item.length))];\r\n//     const prices = items.map(item => parseInt(item.price));\r\n//     const minPrice = Math.min(...prices);\r\n//     const maxPrice = Math.max(...prices);\r\n\r\n//     return { materials, diameters, lengths, minPrice, maxPrice };\r\n//   }, [items]);\r\n\r\n//   const handleMaterialChange = (material) => {\r\n//     const newMaterials = filters.materials.includes(material)\r\n//       ? filters.materials.filter(m => m !== material)\r\n//       : [...filters.materials, material];\r\n    \r\n//     const newFilters = { ...filters, materials: newMaterials };\r\n//     setFilters(newFilters);\r\n//     onFilterChange(newFilters);\r\n//   };\r\n\r\n//   const handleDiameterChange = (diameter) => {\r\n//     const newDiameters = filters.diameters.includes(diameter)\r\n//       ? filters.diameters.filter(d => d !== diameter)\r\n//       : [...filters.diameters, diameter];\r\n    \r\n//     const newFilters = { ...filters, diameters: newDiameters };\r\n//     setFilters(newFilters);\r\n//     onFilterChange(newFilters);\r\n//   };\r\n\r\n//   const handleLengthChange = (length) => {\r\n//     const newLengths = filters.lengths.includes(length)\r\n//       ? filters.lengths.filter(l => l !== length)\r\n//       : [...filters.lengths, length];\r\n    \r\n//     const newFilters = { ...filters, lengths: newLengths };\r\n//     setFilters(newFilters);\r\n//     onFilterChange(newFilters);\r\n//   };\r\n\r\n//   const handlePriceChange = (min, max) => {\r\n//     const newFilters = { \r\n//       ...filters, \r\n//       priceRange: { min: parseInt(min), max: parseInt(max) } \r\n//     };\r\n//     setFilters(newFilters);\r\n//     onFilterChange(newFilters);\r\n//   };\r\n\r\n//   const resetFilters = () => {\r\n//     const newFilters = {\r\n//       materials: [],\r\n//       diameters: [],\r\n//       lengths: [],\r\n//       priceRange: { min: 0, max: 1000 }\r\n//     };\r\n//     setFilters(newFilters);\r\n//     onFilterChange(newFilters);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"advanced-filter\">\r\n//       <div \r\n//         className=\"filter-header\"\r\n//         onClick={() => setIsExpanded(!isExpanded)}\r\n//       >\r\n//         <h3>Расширенный фильтр</h3>\r\n//         <span className={`expand-icon ${isExpanded ? 'expanded' : ''}`}>\r\n//           ▼\r\n//         </span>\r\n//       </div>\r\n\r\n//       {isExpanded && (\r\n//         <div className=\"filter-content\">\r\n//           {/* Фильтр по материалу */}\r\n//           <div className=\"filter-group\">\r\n//             <label>Материал:</label>\r\n//             <div className=\"filter-options\">\r\n//               {filterOptions.materials.map(material => (\r\n//                 <label key={material} className=\"filter-option\">\r\n//                   <input\r\n//                     type=\"checkbox\"\r\n//                     checked={filters.materials.includes(material)}\r\n//                     onChange={() => handleMaterialChange(material)}\r\n//                   />\r\n//                   {material}\r\n//                 </label>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Фильтр по диаметру */}\r\n//           <div className=\"filter-group\">\r\n//             <label>Диаметр:</label>\r\n//             <div className=\"filter-options\">\r\n//               {filterOptions.diameters.map(diameter => (\r\n//                 <label key={diameter} className=\"filter-option\">\r\n//                   <input\r\n//                     type=\"checkbox\"\r\n//                     checked={filters.diameters.includes(diameter)}\r\n//                     onChange={() => handleDiameterChange(diameter)}\r\n//                   />\r\n//                   {diameter}\r\n//                 </label>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Фильтр по длине */}\r\n//           <div className=\"filter-group\">\r\n//             <label>Длина:</label>\r\n//             <div className=\"filter-options\">\r\n//               {filterOptions.lengths.map(length => (\r\n//                 <label key={length} className=\"filter-option\">\r\n//                   <input\r\n//                     type=\"checkbox\"\r\n//                     checked={filters.lengths.includes(length)}\r\n//                     onChange={() => handleLengthChange(length)}\r\n//                   />\r\n//                   {length}\r\n//                 </label>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Фильтр по цене */}\r\n//           <div className=\"filter-group\">\r\n//             <label>Цена: {filters.priceRange.min} - {filters.priceRange.max} руб.</label>\r\n//             <div className=\"price-range\">\r\n//               <input\r\n//                 type=\"range\"\r\n//                 min={filterOptions.minPrice}\r\n//                 max={filterOptions.maxPrice}\r\n//                 value={filters.priceRange.min}\r\n//                 onChange={(e) => handlePriceChange(e.target.value, filters.priceRange.max)}\r\n//                 className=\"price-slider\"\r\n//               />\r\n//               <input\r\n//                 type=\"range\"\r\n//                 min={filterOptions.minPrice}\r\n//                 max={filterOptions.maxPrice}\r\n//                 value={filters.priceRange.max}\r\n//                 onChange={(e) => handlePriceChange(filters.priceRange.min, e.target.value)}\r\n//                 className=\"price-slider\"\r\n//               />\r\n//             </div>\r\n//           </div>\r\n\r\n//           <button onClick={resetFilters} className=\"reset-filters-btn\">\r\n//             Сбросить фильтры\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdvancedFilter;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,cAAcA,CAAC;EAAEC,KAAK;EAAEC,cAAc;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACzD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC;IACrCW,UAAU,EAAE,EAAE;IACdC,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,EAAE;IACfC,UAAU,EAAE;MAAEC,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAK;EAClC,CAAC,CAAC;;EAEF;EACA,MAAMC,aAAa,GAAGnB,OAAO,CAAC,MAAM;IAClC,MAAMU,UAAU,GAAG,CAAC,GAAG,IAAIU,GAAG,CAAChB,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC;IAClE,MAAMZ,YAAY,GAAG,CAAC,GAAG,IAAIS,GAAG,CAAChB,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC;IACtE,MAAMZ,SAAS,GAAG,CAAC,GAAG,IAAIQ,GAAG,CAAChB,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;IAChE,MAAMZ,KAAK,GAAG,CAAC,GAAG,IAAIO,GAAG,CAAChB,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC;IACxD,MAAMZ,KAAK,GAAG,CAAC,GAAG,IAAIM,GAAG,CAAChB,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACK,IAAI,CAAC,CAAC,CAAC;IACxD,MAAMZ,WAAW,GAAG,CAAC,GAAG,IAAIK,GAAG,CAAChB,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACM,UAAU,CAAC,CAAC,CAAC;IACpE,MAAMC,MAAM,GAAGzB,KAAK,CAACiB,GAAG,CAACC,IAAI,IAAIQ,QAAQ,CAACR,IAAI,CAACS,KAAK,CAAC,CAAC;IACtD,MAAMC,QAAQ,GAAGC,IAAI,CAAChB,GAAG,CAAC,GAAGY,MAAM,CAAC;IACpC,MAAMK,QAAQ,GAAGD,IAAI,CAACf,GAAG,CAAC,GAAGW,MAAM,CAAC;IAEpC,OAAO;MACLnB,UAAU;MACVC,YAAY;MACZC,SAAS;MACTC,KAAK;MACLC,KAAK;MACLC,WAAW;MACXiB,QAAQ;MACRE;IACF,CAAC;EACH,CAAC,EAAE,CAAC9B,KAAK,CAAC,CAAC;EAEX,MAAM+B,kBAAkB,GAAGA,CAACC,UAAU,EAAEC,KAAK,KAAK;IAChD,MAAMC,SAAS,GAAG9B,OAAO,CAAC4B,UAAU,CAAC,CAACG,QAAQ,CAACF,KAAK,CAAC,GACjD7B,OAAO,CAAC4B,UAAU,CAAC,CAACI,MAAM,CAAClB,IAAI,IAAIA,IAAI,KAAKe,KAAK,CAAC,GAClD,CAAC,GAAG7B,OAAO,CAAC4B,UAAU,CAAC,EAAEC,KAAK,CAAC;IAEnC,MAAMI,UAAU,GAAG;MAAE,GAAGjC,OAAO;MAAE,CAAC4B,UAAU,GAAGE;IAAU,CAAC;IAC1D7B,UAAU,CAACgC,UAAU,CAAC;IACtBpC,cAAc,CAACoC,UAAU,CAAC;EAC5B,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAACzB,GAAG,EAAEC,GAAG,KAAK;IACtC,MAAMuB,UAAU,GAAG;MACjB,GAAGjC,OAAO;MACVQ,UAAU,EAAE;QAAEC,GAAG,EAAEa,QAAQ,CAACb,GAAG,CAAC;QAAEC,GAAG,EAAEY,QAAQ,CAACZ,GAAG;MAAE;IACvD,CAAC;IACDT,UAAU,CAACgC,UAAU,CAAC;IACtBpC,cAAc,CAACoC,UAAU,CAAC;EAC5B,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMF,UAAU,GAAG;MACjB/B,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,EAAE;MACbC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE;MAAK;IAClC,CAAC;IACDT,UAAU,CAACgC,UAAU,CAAC;IACtBpC,cAAc,CAACoC,UAAU,CAAC;EAC5B,CAAC;EAED,IAAI,CAACnC,MAAM,EAAE,OAAO,IAAI;EAExB,oBACEJ,OAAA;IAAK0C,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC9B3C,OAAA;MAAK0C,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B3C,OAAA;QAAK0C,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAG1B3C,OAAA;UAAK0C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3C,OAAA;YAAA2C,QAAA,EAAO;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACrB/C,OAAA;YAAK0C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAC5B1B,aAAa,CAACT,UAAU,CAACW,GAAG,CAACE,SAAS,iBACrCrB,OAAA;cAAuB0C,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC9C3C,OAAA;gBACEgD,IAAI,EAAC,UAAU;gBACfC,OAAO,EAAE3C,OAAO,CAACE,UAAU,CAAC6B,QAAQ,CAAChB,SAAS,CAAE;gBAChD6B,QAAQ,EAAEA,CAAA,KAAMjB,kBAAkB,CAAC,YAAY,EAAEZ,SAAS;cAAE;gBAAAuB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7D,CAAC,EACD1B,SAAS;YAAA,GANAA,SAAS;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOd,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGN/C,OAAA;UAAK0C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3C,OAAA;YAAA2C,QAAA,EAAO;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC7B/C,OAAA;YAAK0C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAC5B1B,aAAa,CAACR,YAAY,CAACU,GAAG,CAAC6B,IAAI,iBAClChD,OAAA;cAAkB0C,SAAS,EAAC,eAAe;cAAAC,QAAA,gBACzC3C,OAAA;gBACEgD,IAAI,EAAC,UAAU;gBACfC,OAAO,EAAE3C,OAAO,CAACG,YAAY,CAAC4B,QAAQ,CAACW,IAAI,CAAE;gBAC7CE,QAAQ,EAAEA,CAAA,KAAMjB,kBAAkB,CAAC,cAAc,EAAEe,IAAI;cAAE;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1D,CAAC,EACDC,IAAI;YAAA,GANKA,IAAI;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOT,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGN/C,OAAA;UAAK0C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3C,OAAA;YAAA2C,QAAA,EAAO;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACvB/C,OAAA;YAAK0C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAC5B1B,aAAa,CAACP,SAAS,CAACS,GAAG,CAACI,QAAQ,iBACnCvB,OAAA;cAAsB0C,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC7C3C,OAAA;gBACEgD,IAAI,EAAC,UAAU;gBACfC,OAAO,EAAE3C,OAAO,CAACI,SAAS,CAAC2B,QAAQ,CAACd,QAAQ,CAAE;gBAC9C2B,QAAQ,EAAEA,CAAA,KAAMjB,kBAAkB,CAAC,WAAW,EAAEV,QAAQ;cAAE;gBAAAqB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3D,CAAC,EACDxB,QAAQ;YAAA,GANCA,QAAQ;cAAAqB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOb,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGN/C,OAAA;UAAK0C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3C,OAAA;YAAA2C,QAAA,EAAO;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACtB/C,OAAA;YAAK0C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAC5B1B,aAAa,CAACN,KAAK,CAACQ,GAAG,CAACK,IAAI,iBAC3BxB,OAAA;cAAkB0C,SAAS,EAAC,eAAe;cAAAC,QAAA,gBACzC3C,OAAA;gBACEgD,IAAI,EAAC,UAAU;gBACfC,OAAO,EAAE3C,OAAO,CAACK,KAAK,CAAC0B,QAAQ,CAACb,IAAI,CAAE;gBACtC0B,QAAQ,EAAEA,CAAA,KAAMjB,kBAAkB,CAAC,OAAO,EAAET,IAAI;cAAE;gBAAAoB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD,CAAC,EACDvB,IAAI;YAAA,GANKA,IAAI;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOT,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGN/C,OAAA;UAAK0C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3C,OAAA;YAAA2C,QAAA,EAAO;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpB/C,OAAA;YAAK0C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAC5B1B,aAAa,CAACL,KAAK,CAACO,GAAG,CAACM,IAAI,iBAC3BzB,OAAA;cAAkB0C,SAAS,EAAC,eAAe;cAAAC,QAAA,gBACzC3C,OAAA;gBACEgD,IAAI,EAAC,UAAU;gBACfC,OAAO,EAAE3C,OAAO,CAACM,KAAK,CAACyB,QAAQ,CAACZ,IAAI,CAAE;gBACtCyB,QAAQ,EAAEA,CAAA,KAAMjB,kBAAkB,CAAC,OAAO,EAAER,IAAI;cAAE;gBAAAmB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD,CAAC,EACDtB,IAAI;YAAA,GANKA,IAAI;cAAAmB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOT,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGN/C,OAAA;UAAK0C,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B3C,OAAA;YAAA2C,QAAA,EAAO;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC3B/C,OAAA;YAAK0C,SAAS,EAAC,gBAAgB;YAAAC,QAAA,EAC5B1B,aAAa,CAACJ,WAAW,CAACM,GAAG,CAACgC,KAAK,iBAClCnD,OAAA;cAAmB0C,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC1C3C,OAAA;gBACEgD,IAAI,EAAC,UAAU;gBACfC,OAAO,EAAE3C,OAAO,CAACO,WAAW,CAACwB,QAAQ,CAACc,KAAK,CAAE;gBAC7CD,QAAQ,EAAEA,CAAA,KAAMjB,kBAAkB,CAAC,aAAa,EAAEkB,KAAK;cAAE;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC1D,CAAC,EACDI,KAAK;YAAA,GANIA,KAAK;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOV,CACR;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH,CAAC,eAGN/C,OAAA;QAAK0C,SAAS,EAAC,2BAA2B;QAAAC,QAAA,gBACxC3C,OAAA;UAAA2C,QAAA,GAAO,4BAAM,EAACrC,OAAO,CAACQ,UAAU,CAACC,GAAG,EAAC,KAAG,EAACT,OAAO,CAACQ,UAAU,CAACE,GAAG,EAAC,sBAAK;QAAA;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC7E/C,OAAA;UAAK0C,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1B3C,OAAA;YACEgD,IAAI,EAAC,OAAO;YACZjC,GAAG,EAAEE,aAAa,CAACa,QAAS;YAC5Bd,GAAG,EAAEC,aAAa,CAACe,QAAS;YAC5BG,KAAK,EAAE7B,OAAO,CAACQ,UAAU,CAACC,GAAI;YAC9BmC,QAAQ,EAAGE,CAAC,IAAKZ,iBAAiB,CAACY,CAAC,CAACC,MAAM,CAAClB,KAAK,EAAE7B,OAAO,CAACQ,UAAU,CAACE,GAAG,CAAE;YAC3E0B,SAAS,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB,CAAC,eACF/C,OAAA;YACEgD,IAAI,EAAC,OAAO;YACZjC,GAAG,EAAEE,aAAa,CAACa,QAAS;YAC5Bd,GAAG,EAAEC,aAAa,CAACe,QAAS;YAC5BG,KAAK,EAAE7B,OAAO,CAACQ,UAAU,CAACE,GAAI;YAC9BkC,QAAQ,EAAGE,CAAC,IAAKZ,iBAAiB,CAAClC,OAAO,CAACQ,UAAU,CAACC,GAAG,EAAEqC,CAAC,CAACC,MAAM,CAAClB,KAAK,CAAE;YAC3EO,SAAS,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEN/C,OAAA;QAAQsD,OAAO,EAAEb,YAAa;QAACC,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAE7D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC1C,EAAA,CAhNQJ,cAAc;AAAAsD,EAAA,GAAdtD,cAAc;AAkNvB,eAAeA,cAAc;;AAK7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}